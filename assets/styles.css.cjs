/// <reference path="styles.css.d.ts" />
const classNames = new Map([
  ['cAvatar', 'c-avatar'],
  ['cButton', 'c-button'],
  ['cButtonIcon', 'c-button__icon'],
  ['cButtonText', 'c-button__text'],
  ['cList', 'c-list'],
  ['cListBody', 'c-list__body'],
  ['cListItem', 'c-list__item'],
  ['cPanel', 'c-panel'],
  ['cThumbnail', 'c-thumbnail'],
  ['cToolbar', 'c-toolbar'],
  ['icon', 'icon'],
  ['oContainer', 'o-container'],
  ['sBgAmber', 's-bg-amber'],
  ['sBgBlack', 's-bg-black'],
  ['sBgBlue', 's-bg-blue'],
  ['sBgBlueGrey', 's-bg-blue-grey'],
  ['sBgBrown', 's-bg-brown'],
  ['sBgCyan', 's-bg-cyan'],
  ['sBgDeepOrange', 's-bg-deep-orange'],
  ['sBgGreen', 's-bg-green'],
  ['sBgGrey', 's-bg-grey'],
  ['sBgIndigo', 's-bg-indigo'],
  ['sBgLightBlue', 's-bg-light-blue'],
  ['sBgLightGreen', 's-bg-light-green'],
  ['sBgLime', 's-bg-lime'],
  ['sBgOrange', 's-bg-orange'],
  ['sBgPink', 's-bg-pink'],
  ['sBgPurple', 's-bg-purple'],
  ['sBgRed', 's-bg-red'],
  ['sBgTeal', 's-bg-teal'],
  ['sBgViolet', 's-bg-violet'],
  ['sBgWhite', 's-bg-white'],
  ['sBgYellow', 's-bg-yellow'],
  ['sBold', 's-bold'],
  ['sCapitalize', 's-capitalize'],
  ['sCentered', 's-centered'],
  ['sClean', 's-clean'],
  ['sCursive', 's-cursive'],
  ['sCursorAlias', 's-cursor-alias'],
  ['sCursorAllScroll', 's-cursor-all-scroll'],
  ['sCursorAuto', 's-cursor-auto'],
  ['sCursorCell', 's-cursor-cell'],
  ['sCursorColResize', 's-cursor-col-resize'],
  ['sCursorContextMenu', 's-cursor-context-menu'],
  ['sCursorCopy', 's-cursor-copy'],
  ['sCursorCrosshair', 's-cursor-crosshair'],
  ['sCursorDefault', 's-cursor-default'],
  ['sCursorEResize', 's-cursor-e-resize'],
  ['sCursorEwResize', 's-cursor-ew-resize'],
  ['sCursorGrab', 's-cursor-grab'],
  ['sCursorGrabbing', 's-cursor-grabbing'],
  ['sCursorHelp', 's-cursor-help'],
  ['sCursorMove', 's-cursor-move'],
  ['sCursorNResize', 's-cursor-n-resize'],
  ['sCursorNeResize', 's-cursor-ne-resize'],
  ['sCursorNeswResize', 's-cursor-nesw-resize'],
  ['sCursorNoDrop', 's-cursor-no-drop'],
  ['sCursorNone', 's-cursor-none'],
  ['sCursorNotAllowed', 's-cursor-not-allowed'],
  ['sCursorNsResize', 's-cursor-ns-resize'],
  ['sCursorNwResize', 's-cursor-nw-resize'],
  ['sCursorNwseResize', 's-cursor-nwse-resize'],
  ['sCursorPointer', 's-cursor-pointer'],
  ['sCursorProgress', 's-cursor-progress'],
  ['sCursorRowResize', 's-cursor-row-resize'],
  ['sCursorSResize', 's-cursor-s-resize'],
  ['sCursorSeResize', 's-cursor-se-resize'],
  ['sCursorSwResize', 's-cursor-sw-resize'],
  ['sCursorText', 's-cursor-text'],
  ['sCursorVerticalText', 's-cursor-vertical-text'],
  ['sCursorWResize', 's-cursor-w-resize'],
  ['sCursorWait', 's-cursor-wait'],
  ['sCursorZoomIn', 's-cursor-zoom-in'],
  ['sCursorZoomOut', 's-cursor-zoom-out'],
  ['sDanger', 's-danger'],
  ['sDefaultSize', 's-default-size'],
  ['sExtraBold', 's-extra-bold'],
  ['sExtraLight', 's-extra-light'],
  ['sFlipHorizontal', 's-flip-horizontal'],
  ['sFlipRotate90', 's-flip-rotate-90'],
  ['sFloating', 's-floating'],
  ['sHeavy', 's-heavy'],
  ['sHighlighted', 's-highlighted'],
  ['sHovered', 's-hovered'],
  ['sIcon', 's-icon'],
  ['sInversed', 's-inversed'],
  ['sLead', 's-lead'],
  ['sLg', 's-lg'],
  ['sLight', 's-light'],
  ['sLink', 's-link'],
  ['sLoading', 's-loading'],
  ['sLowercase', 's-lowercase'],
  ['sMd', 's-md'],
  ['sMedium', 's-medium'],
  ['sMonospace', 's-monospace'],
  ['sMuted', 's-muted'],
  ['sNormal', 's-normal'],
  ['sPrimary', 's-primary'],
  ['sRounded', 's-rounded'],
  ['sSans', 's-sans'],
  ['sSemiBold', 's-semi-bold'],
  ['sSerif', 's-serif'],
  ['sShadow', 's-shadow'],
  ['sShadow16Dp', 's-shadow-16dp'],
  ['sShadow24Dp', 's-shadow-24dp'],
  ['sShadow2Dp', 's-shadow-2dp'],
  ['sShadow3Dp', 's-shadow-3dp'],
  ['sShadow4Dp', 's-shadow-4dp'],
  ['sShadow6Dp', 's-shadow-6dp'],
  ['sShadow8Dp', 's-shadow-8dp'],
  ['sShadowDiffuse', 's-shadow-diffuse'],
  ['sShadowDreamy', 's-shadow-dreamy'],
  ['sShadowLonger', 's-shadow-longer'],
  ['sShadowSharp', 's-shadow-sharp'],
  ['sShadowShorter', 's-shadow-shorter'],
  ['sSm', 's-sm'],
  ['sStriped', 's-striped'],
  ['sSuccess', 's-success'],
  ['sText', 's-text'],
  ['sThin', 's-thin'],
  ['sUppercase', 's-uppercase'],
  ['sWarning', 's-warning'],
  ['sXl', 's-xl'],
  ['sXs', 's-xs'],
  ['sXxl', 's-xxl'],
  ['sXxs', 's-xxs'],
  ['sXxxl', 's-xxxl']
]);

module.exports = new Proxy(classNames, {
  get(target, attr) {
    switch (attr) {
      case '__esModule':
        return true;
      case 'default':
        const css = require('fs').readFileSync(styles.css);
        const stylesheet = new CSSStyleSheet();
        stylesheet.replaceSync(css);
        return stylesheet;
      default:
        return target.get(attr);
    }
  },
  getPrototypeOf() {
    return Object;
  }
});
